(define (entry tree) (car tree))

(define (left-branch tree) (cadr tree))

(define (right-branch tree) (caddr tree))

(define (make-tree entry left right)
  (list entry left right))

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (entry set)) true)
        ((< x (entry set))
         (element-of-set? x (left-branch set)))
        ((> x (entry set))
         (element-of-set? x (right-branch set)))))

(define (adjoin-set x set)
  (cond ((null? set) (make-tree x '() '()))
        ((= x (entry set)) set)
        ((< x (entry set))
         (make-tree (entry set)
                    (adjoin-set x (left-branch set))
                    (right-branch set)))
        ((> x (entry set))
         (make-tree (entry set)
                    (left-branch set)
                    (adjoin-set x (right-branch set))))))
;;;;;;;2.63 content;;;;;;;;;;;;;;;;;;
(define (tree-list-1 tree)
  (if (null? tree)
      '()
      (append (tree-list-1 (left-branch tree))
              (cons (entry tree)
                    (tree-list-1 (right-branch tree))))))

(define (tree-list-2 tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list (left-branch tree)
                      (cons (entry tree)
                            (copy-to-list (right-branch tree)
                                          result-list)))))
  (copy-to-list tree '()))

(define test1 (list 7 (list 3 (list 1 () ()) (list 5 () ())) (list 9 () (list 11 () ()))))
(display test1)
(newline)
(display (tree-list-1 test1))
(newline)
(display (tree-list-2 test1))

(newline)
(define test2 (list 3 (list 1 () ()) (list 7 (list 5 () ()) (list 9 () (list 11 () ())))))
(display test2)
(newline)
(display (tree-list-1 test2))
(newline)
(display (tree-list-2 test2))

(newline)
(define test3 (list 5 (list 3 (list 1 () ()) ()) (list 9 (list 7 () ()) (list 11 () ()))))
(display test2)
(newline)
(display (tree-list-1 test3))
(newline)
(display (tree-list-2 test3))



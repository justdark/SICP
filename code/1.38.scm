(define (cont-frac N D k)
  (define (cont-frac-iter N D k p)
    (if (> p k)
        0
        (/ (N p) (+ (D p) (cont-frac-iter N D k (+ p 1))))))
  (cont-frac-iter N D k 1))
(define (calc-e k)
  (define (square n) (* n n))
  (define (even? a)
    (= (remainder a 2) 0))
  (define (fast-exp b n)
    (cond ((= n 0) 1)
          ((even? n) (square (fast-exp b (/ n 2))))
          (else (* b (fast-exp b (- n 1))))))
  (define (Quotient a b)
    (/ (- a (remainder a b)) b))
  (+ (cont-frac (lambda (i) 1.0)
             (lambda (i)
               (cond ((= (remainder i 3) 1) 1.0)
                     ((= (remainder i 3) 2) (* 2 (fast-exp 2 (Quotient i 3))))
                     ((= (remainder i 3) 0) 1.0)))
             k) 2))
(calc-e 100)